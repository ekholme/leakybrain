{
  "hash": "9d051d20e747ea19f1c97382bd57feb8",
  "result": {
    "markdown": "---\ntitle: MLJ Pipeline\ndescription: |\n  A minimal machine learning pipeline using Julia's MLJ framework\ndate: '2023-07-07'\nformat:\n  html:\n    code-fold: false\n---\n\nBelow is a minimal (yet complete) example of a machine learning pipeline that use's Julia's [MLJ](https://alan-turing-institute.github.io/MLJ.jl/dev/) framework and the [Palmer Penguins dataset](https://allisonhorst.github.io/palmerpenguins/).\n\nNote that the goal here isn't necessarily to fit the best model; rather it's just to demonstrate an MLJ pipeline.\n\n::: {.cell execution_count=1}\n``` {.julia .cell-code}\nusing DataFrames\nusing CSV\nusing Random\nusing MLJ\n\nRandom.seed!(0408)\n\n#get penguins data\npenguins = CSV.read(download(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-07-28/penguins.csv\"), DataFrame, missingstring=\"NA\")\n\n#filter to those without missing body mass\ndropmissing!(penguins, :body_mass_g)\n\n#extract body mass as y\ny, X = unpack(penguins, ==(:body_mass_g))\n\n# coercing textual columns to multiclass for modeling\ncoerce_nms = [:species, :sex, :island]\n\nc_dict = Dict(zip(coerce_nms, repeat([Multiclass], 3)))\n\ncoerce!(\n    X,\n    c_dict\n)\n\n#get training and validation indices\ntrn, val = partition(eachindex(y), 0.8; shuffle=true)\n\n#define pipeline components\nimp = FillImputer();\nstand = Standardizer();\noh = OneHotEncoder(drop_last=true);\nLinearRegression = @load LinearRegressor pkg = GLM add = true\nmod = LinearRegression()\n\n#define pipeline\nm = Pipeline(imp, stand, oh, mod)\n\n#define machine\nmach = machine(m, X, y);\n\n#fit machine on training rows\nfit!(mach, rows=trn)\n\n#predicting training y's\nŷ = MLJ.predict_mean(mach, X[trn, :])\n\n#evaluate model\ncv = CV(nfolds=3)\n\nMLJ.evaluate!(mach, rows=val, resampling=cv, measure=rmse)\n\n#note -- call measures() to see all available measures\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n┌ Info: Trying to coerce from `Union{Missing, String7}` to `Multiclass`.\n└ Coerced to `Union{Missing,Multiclass}` instead.\n[ Info: For silent loading, specify `verbosity=0`. \n[ Info: Training machine(ProbabilisticPipeline(fill_imputer = FillImputer(features = Symbol[], …), …), …).\n[ Info: Training machine(:fill_imputer, …).\n[ Info: Training machine(:standardizer, …).\n[ Info: Training machine(:one_hot_encoder, …).\n[ Info: Spawning 2 sub-features to one-hot encode feature :species.\n[ Info: Spawning 2 sub-features to one-hot encode feature :island.\n[ Info: Spawning 1 sub-features to one-hot encode feature :sex.\n[ Info: Training machine(:linear_regressor, …).\n[ Info: Creating subsamples from a subset of all rows. \n\rEvaluating over 3 folds:  67%[================>        ]  ETA: 0:00:01\rEvaluating over 3 folds: 100%[=========================] Time: 0:00:02\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nimport MLJGLMInterface ✔\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=2}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre>PerformanceEvaluation object with these fields:\n  measure, operation, measurement, per_fold,\n  per_observation, fitted_params_per_fold,\n  report_per_fold, train_test_rows\nExtract:\n┌────────────────────────┬──────────────┬─────────────┬─────────┬───────────────\n│ measure                │ operation    │ measurement │ 1.96*SE │ per_fold     ⋯\n├────────────────────────┼──────────────┼─────────────┼─────────┼───────────────\n│ RootMeanSquaredError() │ predict_mean │ 342.0       │ 94.8    │ [277.0, 322. ⋯\n└────────────────────────┴──────────────┴─────────────┴─────────┴───────────────\n<span class=\"ansi-cyan-fg\">                                                                1 column omitted</span>\n</pre>\n```\n:::\n\n:::\n:::\n\n\n",
    "supporting": [
      "mlj_pipeline_files"
    ],
    "filters": [],
    "includes": {}
  }
}