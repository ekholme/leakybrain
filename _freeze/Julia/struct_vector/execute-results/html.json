{
  "hash": "737e3e7bbf81775b8a52dc2a3adbae2b",
  "result": {
    "markdown": "---\ntitle: Inititializing a Vector of Structs\ndescription: |\n  How to initialize a vector of structs in Julia\ndate: today\nformat:\n  html:\n    code-fold: false\n---\n\nHere's an example of how to initialize a vector of structs in Julia. It's sometimes useful to coerce other data structures into vectors of structs to perform operations on them, and so this snippet provides a basic example of creating and populating a vector of a custom struct\n\n# Load Pkgs and Define Struct\n\n::: {.cell execution_count=1}\n``` {.julia .cell-code}\nusing Random #for creating data\n\n#define struct\nmutable struct MyType\n  x::String\n  y::Int64\n  z::Vector{Float64}\nend\n\n#instantiate an example struct\na = MyType(\"hello\", 1, [1., 1.5, 104.1])\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\nMyType(\"hello\", 1, [1.0, 1.5, 104.1])\n```\n:::\n:::\n\n\n# Create a Constructor\n\nThis isn't strictly necessary, but it can be useful. This just creates a new instance of MyType with random values\n\n::: {.cell execution_count=2}\n``` {.julia .cell-code}\nfunction MyType()\n    MyType(randstring(10), rand(1:100), rand(Float64, 3))\nend\n\na = MyType()\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\nMyType(\"WAc1LBvkFm\", 33, [0.3619946274985777, 0.858479824777187, 0.720193448993144])\n```\n:::\n:::\n\n\n# Create an Empty n-vector, then Populate It\n\n::: {.cell execution_count=3}\n``` {.julia .cell-code}\nn = 100\n\n#initialize an n-vector with 0 values\nv = Vector{MyType}(undef, n)\n\n#populate the vector\nfor i âˆˆ eachindex(v)\n    v[i] = MyType()\nend\n```\n:::\n\n\n# Check Results\n\nwe want v to be a vector of MyType\n\n::: {.cell execution_count=4}\n``` {.julia .cell-code}\ntypeof(v)\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre>Vector{MyType}<span class=\"ansi-bright-black-fg\"> (alias for </span><span class=\"ansi-bright-black-fg\">Array{MyType, 1}</span><span class=\"ansi-bright-black-fg\">)</span></pre>\n```\n:::\n\n:::\n:::\n\n\nand we want each element to be MyType\n\n::: {.cell execution_count=5}\n``` {.julia .cell-code}\ntypeof(v[1])\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\nMyType\n```\n:::\n:::\n\n\nand let's check the first element\n\n::: {.cell execution_count=6}\n``` {.julia .cell-code}\nv[1]\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\nMyType(\"HmSiEUvtnk\", 24, [0.22658234942156086, 0.5284152678374769, 0.48072129238569283])\n```\n:::\n:::\n\n\n",
    "supporting": [
      "struct_vector_files"
    ],
    "filters": [],
    "includes": {}
  }
}