{
  "hash": "f6ae69b403dcccf6a58b13f98161186e",
  "result": {
    "markdown": "---\ntitle: \"Base R - match()\"\ndescription: |\n  Some uses of match() from base R\ndate: today\nformat:\n  html:\n    code-fold: false\n---\n\n\nI've sort of rediscovered base R's `match()` function recently, so I figured I'd add a page here about it.\n\nPer it's documentation, match \"returns a vector of the positions of (first) matches of its first argument in its second.\"\n\nSo let's illustrate this with the following data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 1\ny <- c(2, 3, 4, 1, 5)\n\n#we expect this to return 4 -- the index of the value 1 in y\nmatch(x, y)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4\n```\n:::\n:::\n\n\nAnd if x contains multiple elements, it does the same thing for each element:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 1:2\n\nmatch(x, y) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4 1\n```\n:::\n:::\n\n\nAnd if y contains repeats of the same element, we still just get the first match:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ny <- c(y, 1) \n\nmatch(x, y)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4 1\n```\n:::\n:::\n\n\nThe cool thing for me here is what we can use this for replacements.\n\nThe following code:\n\n1. draws `x`, 100 samples (with replacement) from a uniform distribution 1:10;\n2. determines `k`, the number of unique values in `x`;\n3. draws `y`, which is `k` samples from `LETTERS` (a vector containing all capital letters);\n4. creates a new vector, `x_replace` that replaces each unique value in `x` with a corresponding value of `y`. If we truly wanted to replace `x`, we would just assign this last result to back to `x`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(0408)\nn <- 100\nx <- sample.int(10, size = n, replace = TRUE) \nk <- length(unique(x))\ny <- sample(LETTERS, k, replace = FALSE)\n\nx_replace <- y[match(x, unique(x))]\n```\n:::\n\n\nAnd to show that this does what we think, let's look at the first 10 values of `x`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx[1:10]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 10  9  9  8  7  1  1  5  5  3\n```\n:::\n:::\n\n\nas well as the first 10 values of `x_replace`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx_replace[1:10] \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"S\" \"W\" \"W\" \"L\" \"K\" \"U\" \"U\" \"E\" \"E\" \"C\"\n```\n:::\n:::\n\n\nand we can see that \"S\" corresponds to 10, \"W\" corresponds to 9, \"U\" corresponds to 1, etc.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}