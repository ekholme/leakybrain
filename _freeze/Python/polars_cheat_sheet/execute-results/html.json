{
  "hash": "8c01fa5e073d7592988d055b8a68e0af",
  "result": {
    "markdown": "---\ntitle: Polars Cheat Sheet\ndescription: |\n  A work-in-progress cheat sheet for working with polars dataframes\nformat:\n  html:\n    code-fold: false\n---\n\n# Setup & Read in Data\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport polars.selectors as cs\nimport polars as pl\n\n# read in data\npenguins = pl.read_csv(\n    \"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-07-28/penguins.csv\",\n    null_values=\"NA\",\n)\n```\n:::\n\n\n# Check Properties of a Dataframe\n\nuse the `shape` attribute to check the dimensions (rows, cols)\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\npenguins.shape\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\n(344, 8)\n```\n:::\n:::\n\n\nuse the `head()` method to see the first few rows\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\npenguins.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n<div><style>\n.dataframe > thead > tr > th,\n.dataframe > tbody > tr > td {\n  text-align: right;\n}\n</style>\n<small>shape: (5, 8)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>species</th><th>island</th><th>bill_length_mm</th><th>bill_depth_mm</th><th>flipper_length_mm</th><th>body_mass_g</th><th>sex</th><th>year</th></tr><tr><td>str</td><td>str</td><td>f64</td><td>f64</td><td>i64</td><td>i64</td><td>str</td><td>i64</td></tr></thead><tbody><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td><td>39.1</td><td>18.7</td><td>181</td><td>3750</td><td>&quot;male&quot;</td><td>2007</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td><td>39.5</td><td>17.4</td><td>186</td><td>3800</td><td>&quot;female&quot;</td><td>2007</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td><td>40.3</td><td>18.0</td><td>195</td><td>3250</td><td>&quot;female&quot;</td><td>2007</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>2007</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td><td>36.7</td><td>19.3</td><td>193</td><td>3450</td><td>&quot;female&quot;</td><td>2007</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\nto see the column names, we can use the `columns` attribute\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\npenguins.columns\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\n['species',\n 'island',\n 'bill_length_mm',\n 'bill_depth_mm',\n 'flipper_length_mm',\n 'body_mass_g',\n 'sex',\n 'year']\n```\n:::\n:::\n\n\n# Subset Rows\n\nFor the most part, we want to subset rows using the `filter()` method.\n\nFor example, we might want to filter out rows that aren't missing data for the body mass variable\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\npenguins.filter(pl.col(\"body_mass_g\").is_not_null())\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```{=html}\n<div><style>\n.dataframe > thead > tr > th,\n.dataframe > tbody > tr > td {\n  text-align: right;\n}\n</style>\n<small>shape: (342, 8)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>species</th><th>island</th><th>bill_length_mm</th><th>bill_depth_mm</th><th>flipper_length_mm</th><th>body_mass_g</th><th>sex</th><th>year</th></tr><tr><td>str</td><td>str</td><td>f64</td><td>f64</td><td>i64</td><td>i64</td><td>str</td><td>i64</td></tr></thead><tbody><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td><td>39.1</td><td>18.7</td><td>181</td><td>3750</td><td>&quot;male&quot;</td><td>2007</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td><td>39.5</td><td>17.4</td><td>186</td><td>3800</td><td>&quot;female&quot;</td><td>2007</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td><td>40.3</td><td>18.0</td><td>195</td><td>3250</td><td>&quot;female&quot;</td><td>2007</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td><td>36.7</td><td>19.3</td><td>193</td><td>3450</td><td>&quot;female&quot;</td><td>2007</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td><td>39.3</td><td>20.6</td><td>190</td><td>3650</td><td>&quot;male&quot;</td><td>2007</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td><td>38.9</td><td>17.8</td><td>181</td><td>3625</td><td>&quot;female&quot;</td><td>2007</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td><td>39.2</td><td>19.6</td><td>195</td><td>4675</td><td>&quot;male&quot;</td><td>2007</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td><td>34.1</td><td>18.1</td><td>193</td><td>3475</td><td>null</td><td>2007</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td><td>42.0</td><td>20.2</td><td>190</td><td>4250</td><td>null</td><td>2007</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td><td>37.8</td><td>17.1</td><td>186</td><td>3300</td><td>null</td><td>2007</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td><td>37.8</td><td>17.3</td><td>180</td><td>3700</td><td>null</td><td>2007</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td><td>41.1</td><td>17.6</td><td>182</td><td>3200</td><td>&quot;female&quot;</td><td>2007</td></tr><tr><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td></tr><tr><td>&quot;Chinstrap&quot;</td><td>&quot;Dream&quot;</td><td>45.2</td><td>16.6</td><td>191</td><td>3250</td><td>&quot;female&quot;</td><td>2009</td></tr><tr><td>&quot;Chinstrap&quot;</td><td>&quot;Dream&quot;</td><td>49.3</td><td>19.9</td><td>203</td><td>4050</td><td>&quot;male&quot;</td><td>2009</td></tr><tr><td>&quot;Chinstrap&quot;</td><td>&quot;Dream&quot;</td><td>50.2</td><td>18.8</td><td>202</td><td>3800</td><td>&quot;male&quot;</td><td>2009</td></tr><tr><td>&quot;Chinstrap&quot;</td><td>&quot;Dream&quot;</td><td>45.6</td><td>19.4</td><td>194</td><td>3525</td><td>&quot;female&quot;</td><td>2009</td></tr><tr><td>&quot;Chinstrap&quot;</td><td>&quot;Dream&quot;</td><td>51.9</td><td>19.5</td><td>206</td><td>3950</td><td>&quot;male&quot;</td><td>2009</td></tr><tr><td>&quot;Chinstrap&quot;</td><td>&quot;Dream&quot;</td><td>46.8</td><td>16.5</td><td>189</td><td>3650</td><td>&quot;female&quot;</td><td>2009</td></tr><tr><td>&quot;Chinstrap&quot;</td><td>&quot;Dream&quot;</td><td>45.7</td><td>17.0</td><td>195</td><td>3650</td><td>&quot;female&quot;</td><td>2009</td></tr><tr><td>&quot;Chinstrap&quot;</td><td>&quot;Dream&quot;</td><td>55.8</td><td>19.8</td><td>207</td><td>4000</td><td>&quot;male&quot;</td><td>2009</td></tr><tr><td>&quot;Chinstrap&quot;</td><td>&quot;Dream&quot;</td><td>43.5</td><td>18.1</td><td>202</td><td>3400</td><td>&quot;female&quot;</td><td>2009</td></tr><tr><td>&quot;Chinstrap&quot;</td><td>&quot;Dream&quot;</td><td>49.6</td><td>18.2</td><td>193</td><td>3775</td><td>&quot;male&quot;</td><td>2009</td></tr><tr><td>&quot;Chinstrap&quot;</td><td>&quot;Dream&quot;</td><td>50.8</td><td>19.0</td><td>210</td><td>4100</td><td>&quot;male&quot;</td><td>2009</td></tr><tr><td>&quot;Chinstrap&quot;</td><td>&quot;Dream&quot;</td><td>50.2</td><td>18.7</td><td>198</td><td>3775</td><td>&quot;female&quot;</td><td>2009</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\nBasically, filter keeps rows where the expression evaluates to `True`. And so we can use any predicate expression that results in a boolean. We can also use multiple expressions.\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\npenguins.filter((pl.col(\"species\") == \"Adelie\") & (pl.col(\"bill_length_mm\") >= 39.0))\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```{=html}\n<div><style>\n.dataframe > thead > tr > th,\n.dataframe > tbody > tr > td {\n  text-align: right;\n}\n</style>\n<small>shape: (72, 8)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>species</th><th>island</th><th>bill_length_mm</th><th>bill_depth_mm</th><th>flipper_length_mm</th><th>body_mass_g</th><th>sex</th><th>year</th></tr><tr><td>str</td><td>str</td><td>f64</td><td>f64</td><td>i64</td><td>i64</td><td>str</td><td>i64</td></tr></thead><tbody><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td><td>39.1</td><td>18.7</td><td>181</td><td>3750</td><td>&quot;male&quot;</td><td>2007</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td><td>39.5</td><td>17.4</td><td>186</td><td>3800</td><td>&quot;female&quot;</td><td>2007</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td><td>40.3</td><td>18.0</td><td>195</td><td>3250</td><td>&quot;female&quot;</td><td>2007</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td><td>39.3</td><td>20.6</td><td>190</td><td>3650</td><td>&quot;male&quot;</td><td>2007</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td><td>39.2</td><td>19.6</td><td>195</td><td>4675</td><td>&quot;male&quot;</td><td>2007</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td><td>42.0</td><td>20.2</td><td>190</td><td>4250</td><td>null</td><td>2007</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td><td>41.1</td><td>17.6</td><td>182</td><td>3200</td><td>&quot;female&quot;</td><td>2007</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td><td>42.5</td><td>20.7</td><td>197</td><td>4500</td><td>&quot;male&quot;</td><td>2007</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td><td>46.0</td><td>21.5</td><td>194</td><td>4200</td><td>&quot;male&quot;</td><td>2007</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Biscoe&quot;</td><td>40.6</td><td>18.6</td><td>183</td><td>3550</td><td>&quot;male&quot;</td><td>2007</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Biscoe&quot;</td><td>40.5</td><td>17.9</td><td>187</td><td>3200</td><td>&quot;female&quot;</td><td>2007</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Biscoe&quot;</td><td>40.5</td><td>18.9</td><td>180</td><td>3950</td><td>&quot;male&quot;</td><td>2007</td></tr><tr><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td><td>39.0</td><td>17.1</td><td>191</td><td>3050</td><td>&quot;female&quot;</td><td>2009</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td><td>44.1</td><td>18.0</td><td>210</td><td>4000</td><td>&quot;male&quot;</td><td>2009</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td><td>43.1</td><td>19.2</td><td>197</td><td>3500</td><td>&quot;male&quot;</td><td>2009</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Dream&quot;</td><td>41.1</td><td>17.5</td><td>190</td><td>3900</td><td>&quot;male&quot;</td><td>2009</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Dream&quot;</td><td>40.2</td><td>20.1</td><td>200</td><td>3975</td><td>&quot;male&quot;</td><td>2009</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Dream&quot;</td><td>39.7</td><td>17.9</td><td>193</td><td>4250</td><td>&quot;male&quot;</td><td>2009</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Dream&quot;</td><td>40.2</td><td>17.1</td><td>193</td><td>3400</td><td>&quot;female&quot;</td><td>2009</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Dream&quot;</td><td>40.6</td><td>17.2</td><td>187</td><td>3475</td><td>&quot;male&quot;</td><td>2009</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Dream&quot;</td><td>40.7</td><td>17.0</td><td>190</td><td>3725</td><td>&quot;male&quot;</td><td>2009</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Dream&quot;</td><td>39.0</td><td>18.7</td><td>185</td><td>3650</td><td>&quot;male&quot;</td><td>2009</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Dream&quot;</td><td>39.2</td><td>18.6</td><td>190</td><td>4250</td><td>&quot;male&quot;</td><td>2009</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Dream&quot;</td><td>41.5</td><td>18.5</td><td>201</td><td>4000</td><td>&quot;male&quot;</td><td>2009</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\nWe might also want to filter based on string matches. For example, strings that start with a certain substring\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\npenguins.filter(pl.col(\"species\").str.starts_with(\"Chin\"))\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```{=html}\n<div><style>\n.dataframe > thead > tr > th,\n.dataframe > tbody > tr > td {\n  text-align: right;\n}\n</style>\n<small>shape: (68, 8)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>species</th><th>island</th><th>bill_length_mm</th><th>bill_depth_mm</th><th>flipper_length_mm</th><th>body_mass_g</th><th>sex</th><th>year</th></tr><tr><td>str</td><td>str</td><td>f64</td><td>f64</td><td>i64</td><td>i64</td><td>str</td><td>i64</td></tr></thead><tbody><tr><td>&quot;Chinstrap&quot;</td><td>&quot;Dream&quot;</td><td>46.5</td><td>17.9</td><td>192</td><td>3500</td><td>&quot;female&quot;</td><td>2007</td></tr><tr><td>&quot;Chinstrap&quot;</td><td>&quot;Dream&quot;</td><td>50.0</td><td>19.5</td><td>196</td><td>3900</td><td>&quot;male&quot;</td><td>2007</td></tr><tr><td>&quot;Chinstrap&quot;</td><td>&quot;Dream&quot;</td><td>51.3</td><td>19.2</td><td>193</td><td>3650</td><td>&quot;male&quot;</td><td>2007</td></tr><tr><td>&quot;Chinstrap&quot;</td><td>&quot;Dream&quot;</td><td>45.4</td><td>18.7</td><td>188</td><td>3525</td><td>&quot;female&quot;</td><td>2007</td></tr><tr><td>&quot;Chinstrap&quot;</td><td>&quot;Dream&quot;</td><td>52.7</td><td>19.8</td><td>197</td><td>3725</td><td>&quot;male&quot;</td><td>2007</td></tr><tr><td>&quot;Chinstrap&quot;</td><td>&quot;Dream&quot;</td><td>45.2</td><td>17.8</td><td>198</td><td>3950</td><td>&quot;female&quot;</td><td>2007</td></tr><tr><td>&quot;Chinstrap&quot;</td><td>&quot;Dream&quot;</td><td>46.1</td><td>18.2</td><td>178</td><td>3250</td><td>&quot;female&quot;</td><td>2007</td></tr><tr><td>&quot;Chinstrap&quot;</td><td>&quot;Dream&quot;</td><td>51.3</td><td>18.2</td><td>197</td><td>3750</td><td>&quot;male&quot;</td><td>2007</td></tr><tr><td>&quot;Chinstrap&quot;</td><td>&quot;Dream&quot;</td><td>46.0</td><td>18.9</td><td>195</td><td>4150</td><td>&quot;female&quot;</td><td>2007</td></tr><tr><td>&quot;Chinstrap&quot;</td><td>&quot;Dream&quot;</td><td>51.3</td><td>19.9</td><td>198</td><td>3700</td><td>&quot;male&quot;</td><td>2007</td></tr><tr><td>&quot;Chinstrap&quot;</td><td>&quot;Dream&quot;</td><td>46.6</td><td>17.8</td><td>193</td><td>3800</td><td>&quot;female&quot;</td><td>2007</td></tr><tr><td>&quot;Chinstrap&quot;</td><td>&quot;Dream&quot;</td><td>51.7</td><td>20.3</td><td>194</td><td>3775</td><td>&quot;male&quot;</td><td>2007</td></tr><tr><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td></tr><tr><td>&quot;Chinstrap&quot;</td><td>&quot;Dream&quot;</td><td>45.2</td><td>16.6</td><td>191</td><td>3250</td><td>&quot;female&quot;</td><td>2009</td></tr><tr><td>&quot;Chinstrap&quot;</td><td>&quot;Dream&quot;</td><td>49.3</td><td>19.9</td><td>203</td><td>4050</td><td>&quot;male&quot;</td><td>2009</td></tr><tr><td>&quot;Chinstrap&quot;</td><td>&quot;Dream&quot;</td><td>50.2</td><td>18.8</td><td>202</td><td>3800</td><td>&quot;male&quot;</td><td>2009</td></tr><tr><td>&quot;Chinstrap&quot;</td><td>&quot;Dream&quot;</td><td>45.6</td><td>19.4</td><td>194</td><td>3525</td><td>&quot;female&quot;</td><td>2009</td></tr><tr><td>&quot;Chinstrap&quot;</td><td>&quot;Dream&quot;</td><td>51.9</td><td>19.5</td><td>206</td><td>3950</td><td>&quot;male&quot;</td><td>2009</td></tr><tr><td>&quot;Chinstrap&quot;</td><td>&quot;Dream&quot;</td><td>46.8</td><td>16.5</td><td>189</td><td>3650</td><td>&quot;female&quot;</td><td>2009</td></tr><tr><td>&quot;Chinstrap&quot;</td><td>&quot;Dream&quot;</td><td>45.7</td><td>17.0</td><td>195</td><td>3650</td><td>&quot;female&quot;</td><td>2009</td></tr><tr><td>&quot;Chinstrap&quot;</td><td>&quot;Dream&quot;</td><td>55.8</td><td>19.8</td><td>207</td><td>4000</td><td>&quot;male&quot;</td><td>2009</td></tr><tr><td>&quot;Chinstrap&quot;</td><td>&quot;Dream&quot;</td><td>43.5</td><td>18.1</td><td>202</td><td>3400</td><td>&quot;female&quot;</td><td>2009</td></tr><tr><td>&quot;Chinstrap&quot;</td><td>&quot;Dream&quot;</td><td>49.6</td><td>18.2</td><td>193</td><td>3775</td><td>&quot;male&quot;</td><td>2009</td></tr><tr><td>&quot;Chinstrap&quot;</td><td>&quot;Dream&quot;</td><td>50.8</td><td>19.0</td><td>210</td><td>4100</td><td>&quot;male&quot;</td><td>2009</td></tr><tr><td>&quot;Chinstrap&quot;</td><td>&quot;Dream&quot;</td><td>50.2</td><td>18.7</td><td>198</td><td>3775</td><td>&quot;female&quot;</td><td>2009</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n# Subset Columns\n\nTo subset columns, we want to use the `select()` method.\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\npenguins.select(\"species\")\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```{=html}\n<div><style>\n.dataframe > thead > tr > th,\n.dataframe > tbody > tr > td {\n  text-align: right;\n}\n</style>\n<small>shape: (344, 1)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>species</th></tr><tr><td>str</td></tr></thead><tbody><tr><td>&quot;Adelie&quot;</td></tr><tr><td>&quot;Adelie&quot;</td></tr><tr><td>&quot;Adelie&quot;</td></tr><tr><td>&quot;Adelie&quot;</td></tr><tr><td>&quot;Adelie&quot;</td></tr><tr><td>&quot;Adelie&quot;</td></tr><tr><td>&quot;Adelie&quot;</td></tr><tr><td>&quot;Adelie&quot;</td></tr><tr><td>&quot;Adelie&quot;</td></tr><tr><td>&quot;Adelie&quot;</td></tr><tr><td>&quot;Adelie&quot;</td></tr><tr><td>&quot;Adelie&quot;</td></tr><tr><td>&hellip;</td></tr><tr><td>&quot;Chinstrap&quot;</td></tr><tr><td>&quot;Chinstrap&quot;</td></tr><tr><td>&quot;Chinstrap&quot;</td></tr><tr><td>&quot;Chinstrap&quot;</td></tr><tr><td>&quot;Chinstrap&quot;</td></tr><tr><td>&quot;Chinstrap&quot;</td></tr><tr><td>&quot;Chinstrap&quot;</td></tr><tr><td>&quot;Chinstrap&quot;</td></tr><tr><td>&quot;Chinstrap&quot;</td></tr><tr><td>&quot;Chinstrap&quot;</td></tr><tr><td>&quot;Chinstrap&quot;</td></tr><tr><td>&quot;Chinstrap&quot;</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\nTo select multiple columns, we pass in a list\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\npenguins.select([\"species\", \"island\"])\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```{=html}\n<div><style>\n.dataframe > thead > tr > th,\n.dataframe > tbody > tr > td {\n  text-align: right;\n}\n</style>\n<small>shape: (344, 2)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>species</th><th>island</th></tr><tr><td>str</td><td>str</td></tr></thead><tbody><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td></tr><tr><td>&hellip;</td><td>&hellip;</td></tr><tr><td>&quot;Chinstrap&quot;</td><td>&quot;Dream&quot;</td></tr><tr><td>&quot;Chinstrap&quot;</td><td>&quot;Dream&quot;</td></tr><tr><td>&quot;Chinstrap&quot;</td><td>&quot;Dream&quot;</td></tr><tr><td>&quot;Chinstrap&quot;</td><td>&quot;Dream&quot;</td></tr><tr><td>&quot;Chinstrap&quot;</td><td>&quot;Dream&quot;</td></tr><tr><td>&quot;Chinstrap&quot;</td><td>&quot;Dream&quot;</td></tr><tr><td>&quot;Chinstrap&quot;</td><td>&quot;Dream&quot;</td></tr><tr><td>&quot;Chinstrap&quot;</td><td>&quot;Dream&quot;</td></tr><tr><td>&quot;Chinstrap&quot;</td><td>&quot;Dream&quot;</td></tr><tr><td>&quot;Chinstrap&quot;</td><td>&quot;Dream&quot;</td></tr><tr><td>&quot;Chinstrap&quot;</td><td>&quot;Dream&quot;</td></tr><tr><td>&quot;Chinstrap&quot;</td><td>&quot;Dream&quot;</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\nTo select columns with regex, we can pass regex to `pl.col()`. Note that we need to indicate this is regex by passing both ^ and $.\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\npenguins.select(pl.col(\"^bill_.*$\"))\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```{=html}\n<div><style>\n.dataframe > thead > tr > th,\n.dataframe > tbody > tr > td {\n  text-align: right;\n}\n</style>\n<small>shape: (344, 2)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>bill_length_mm</th><th>bill_depth_mm</th></tr><tr><td>f64</td><td>f64</td></tr></thead><tbody><tr><td>39.1</td><td>18.7</td></tr><tr><td>39.5</td><td>17.4</td></tr><tr><td>40.3</td><td>18.0</td></tr><tr><td>null</td><td>null</td></tr><tr><td>36.7</td><td>19.3</td></tr><tr><td>39.3</td><td>20.6</td></tr><tr><td>38.9</td><td>17.8</td></tr><tr><td>39.2</td><td>19.6</td></tr><tr><td>34.1</td><td>18.1</td></tr><tr><td>42.0</td><td>20.2</td></tr><tr><td>37.8</td><td>17.1</td></tr><tr><td>37.8</td><td>17.3</td></tr><tr><td>&hellip;</td><td>&hellip;</td></tr><tr><td>45.2</td><td>16.6</td></tr><tr><td>49.3</td><td>19.9</td></tr><tr><td>50.2</td><td>18.8</td></tr><tr><td>45.6</td><td>19.4</td></tr><tr><td>51.9</td><td>19.5</td></tr><tr><td>46.8</td><td>16.5</td></tr><tr><td>45.7</td><td>17.0</td></tr><tr><td>55.8</td><td>19.8</td></tr><tr><td>43.5</td><td>18.1</td></tr><tr><td>49.6</td><td>18.2</td></tr><tr><td>50.8</td><td>19.0</td></tr><tr><td>50.2</td><td>18.7</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\nand we can also exclude by regex\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\npenguins.select(pl.exclude(\"^bill_.*$\"))\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```{=html}\n<div><style>\n.dataframe > thead > tr > th,\n.dataframe > tbody > tr > td {\n  text-align: right;\n}\n</style>\n<small>shape: (344, 6)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>species</th><th>island</th><th>flipper_length_mm</th><th>body_mass_g</th><th>sex</th><th>year</th></tr><tr><td>str</td><td>str</td><td>i64</td><td>i64</td><td>str</td><td>i64</td></tr></thead><tbody><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td><td>181</td><td>3750</td><td>&quot;male&quot;</td><td>2007</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td><td>186</td><td>3800</td><td>&quot;female&quot;</td><td>2007</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td><td>195</td><td>3250</td><td>&quot;female&quot;</td><td>2007</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td><td>null</td><td>null</td><td>null</td><td>2007</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td><td>193</td><td>3450</td><td>&quot;female&quot;</td><td>2007</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td><td>190</td><td>3650</td><td>&quot;male&quot;</td><td>2007</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td><td>181</td><td>3625</td><td>&quot;female&quot;</td><td>2007</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td><td>195</td><td>4675</td><td>&quot;male&quot;</td><td>2007</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td><td>193</td><td>3475</td><td>null</td><td>2007</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td><td>190</td><td>4250</td><td>null</td><td>2007</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td><td>186</td><td>3300</td><td>null</td><td>2007</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td><td>180</td><td>3700</td><td>null</td><td>2007</td></tr><tr><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td></tr><tr><td>&quot;Chinstrap&quot;</td><td>&quot;Dream&quot;</td><td>191</td><td>3250</td><td>&quot;female&quot;</td><td>2009</td></tr><tr><td>&quot;Chinstrap&quot;</td><td>&quot;Dream&quot;</td><td>203</td><td>4050</td><td>&quot;male&quot;</td><td>2009</td></tr><tr><td>&quot;Chinstrap&quot;</td><td>&quot;Dream&quot;</td><td>202</td><td>3800</td><td>&quot;male&quot;</td><td>2009</td></tr><tr><td>&quot;Chinstrap&quot;</td><td>&quot;Dream&quot;</td><td>194</td><td>3525</td><td>&quot;female&quot;</td><td>2009</td></tr><tr><td>&quot;Chinstrap&quot;</td><td>&quot;Dream&quot;</td><td>206</td><td>3950</td><td>&quot;male&quot;</td><td>2009</td></tr><tr><td>&quot;Chinstrap&quot;</td><td>&quot;Dream&quot;</td><td>189</td><td>3650</td><td>&quot;female&quot;</td><td>2009</td></tr><tr><td>&quot;Chinstrap&quot;</td><td>&quot;Dream&quot;</td><td>195</td><td>3650</td><td>&quot;female&quot;</td><td>2009</td></tr><tr><td>&quot;Chinstrap&quot;</td><td>&quot;Dream&quot;</td><td>207</td><td>4000</td><td>&quot;male&quot;</td><td>2009</td></tr><tr><td>&quot;Chinstrap&quot;</td><td>&quot;Dream&quot;</td><td>202</td><td>3400</td><td>&quot;female&quot;</td><td>2009</td></tr><tr><td>&quot;Chinstrap&quot;</td><td>&quot;Dream&quot;</td><td>193</td><td>3775</td><td>&quot;male&quot;</td><td>2009</td></tr><tr><td>&quot;Chinstrap&quot;</td><td>&quot;Dream&quot;</td><td>210</td><td>4100</td><td>&quot;male&quot;</td><td>2009</td></tr><tr><td>&quot;Chinstrap&quot;</td><td>&quot;Dream&quot;</td><td>198</td><td>3775</td><td>&quot;female&quot;</td><td>2009</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\nPolars (via the polars.selectors module) also provides utilities similar to tidyverse selectors, such as `starts_with()`\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\npenguins.select(cs.starts_with(\"bill\"))\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```{=html}\n<div><style>\n.dataframe > thead > tr > th,\n.dataframe > tbody > tr > td {\n  text-align: right;\n}\n</style>\n<small>shape: (344, 2)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>bill_length_mm</th><th>bill_depth_mm</th></tr><tr><td>f64</td><td>f64</td></tr></thead><tbody><tr><td>39.1</td><td>18.7</td></tr><tr><td>39.5</td><td>17.4</td></tr><tr><td>40.3</td><td>18.0</td></tr><tr><td>null</td><td>null</td></tr><tr><td>36.7</td><td>19.3</td></tr><tr><td>39.3</td><td>20.6</td></tr><tr><td>38.9</td><td>17.8</td></tr><tr><td>39.2</td><td>19.6</td></tr><tr><td>34.1</td><td>18.1</td></tr><tr><td>42.0</td><td>20.2</td></tr><tr><td>37.8</td><td>17.1</td></tr><tr><td>37.8</td><td>17.3</td></tr><tr><td>&hellip;</td><td>&hellip;</td></tr><tr><td>45.2</td><td>16.6</td></tr><tr><td>49.3</td><td>19.9</td></tr><tr><td>50.2</td><td>18.8</td></tr><tr><td>45.6</td><td>19.4</td></tr><tr><td>51.9</td><td>19.5</td></tr><tr><td>46.8</td><td>16.5</td></tr><tr><td>45.7</td><td>17.0</td></tr><tr><td>55.8</td><td>19.8</td></tr><tr><td>43.5</td><td>18.1</td></tr><tr><td>49.6</td><td>18.2</td></tr><tr><td>50.8</td><td>19.0</td></tr><tr><td>50.2</td><td>18.7</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\nAnother useful feature is selecting by data type. This is something that polars.selectors enables. For instance, if we wanted to select all numeric columns\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\npenguins.select(cs.by_dtype(pl.NUMERIC_DTYPES))\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```{=html}\n<div><style>\n.dataframe > thead > tr > th,\n.dataframe > tbody > tr > td {\n  text-align: right;\n}\n</style>\n<small>shape: (344, 5)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>bill_length_mm</th><th>bill_depth_mm</th><th>flipper_length_mm</th><th>body_mass_g</th><th>year</th></tr><tr><td>f64</td><td>f64</td><td>i64</td><td>i64</td><td>i64</td></tr></thead><tbody><tr><td>39.1</td><td>18.7</td><td>181</td><td>3750</td><td>2007</td></tr><tr><td>39.5</td><td>17.4</td><td>186</td><td>3800</td><td>2007</td></tr><tr><td>40.3</td><td>18.0</td><td>195</td><td>3250</td><td>2007</td></tr><tr><td>null</td><td>null</td><td>null</td><td>null</td><td>2007</td></tr><tr><td>36.7</td><td>19.3</td><td>193</td><td>3450</td><td>2007</td></tr><tr><td>39.3</td><td>20.6</td><td>190</td><td>3650</td><td>2007</td></tr><tr><td>38.9</td><td>17.8</td><td>181</td><td>3625</td><td>2007</td></tr><tr><td>39.2</td><td>19.6</td><td>195</td><td>4675</td><td>2007</td></tr><tr><td>34.1</td><td>18.1</td><td>193</td><td>3475</td><td>2007</td></tr><tr><td>42.0</td><td>20.2</td><td>190</td><td>4250</td><td>2007</td></tr><tr><td>37.8</td><td>17.1</td><td>186</td><td>3300</td><td>2007</td></tr><tr><td>37.8</td><td>17.3</td><td>180</td><td>3700</td><td>2007</td></tr><tr><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td></tr><tr><td>45.2</td><td>16.6</td><td>191</td><td>3250</td><td>2009</td></tr><tr><td>49.3</td><td>19.9</td><td>203</td><td>4050</td><td>2009</td></tr><tr><td>50.2</td><td>18.8</td><td>202</td><td>3800</td><td>2009</td></tr><tr><td>45.6</td><td>19.4</td><td>194</td><td>3525</td><td>2009</td></tr><tr><td>51.9</td><td>19.5</td><td>206</td><td>3950</td><td>2009</td></tr><tr><td>46.8</td><td>16.5</td><td>189</td><td>3650</td><td>2009</td></tr><tr><td>45.7</td><td>17.0</td><td>195</td><td>3650</td><td>2009</td></tr><tr><td>55.8</td><td>19.8</td><td>207</td><td>4000</td><td>2009</td></tr><tr><td>43.5</td><td>18.1</td><td>202</td><td>3400</td><td>2009</td></tr><tr><td>49.6</td><td>18.2</td><td>193</td><td>3775</td><td>2009</td></tr><tr><td>50.8</td><td>19.0</td><td>210</td><td>4100</td><td>2009</td></tr><tr><td>50.2</td><td>18.7</td><td>198</td><td>3775</td><td>2009</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n# Creating New Columns\n\nTo create new columns, we'll use the `with_columns()` method, which is similar to `dplyr::mutate()`\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\npenguins.with_columns(is_chinstrap=pl.col(\"species\") == \"Chinstrap\")\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```{=html}\n<div><style>\n.dataframe > thead > tr > th,\n.dataframe > tbody > tr > td {\n  text-align: right;\n}\n</style>\n<small>shape: (344, 9)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>species</th><th>island</th><th>bill_length_mm</th><th>bill_depth_mm</th><th>flipper_length_mm</th><th>body_mass_g</th><th>sex</th><th>year</th><th>is_chinstrap</th></tr><tr><td>str</td><td>str</td><td>f64</td><td>f64</td><td>i64</td><td>i64</td><td>str</td><td>i64</td><td>bool</td></tr></thead><tbody><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td><td>39.1</td><td>18.7</td><td>181</td><td>3750</td><td>&quot;male&quot;</td><td>2007</td><td>false</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td><td>39.5</td><td>17.4</td><td>186</td><td>3800</td><td>&quot;female&quot;</td><td>2007</td><td>false</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td><td>40.3</td><td>18.0</td><td>195</td><td>3250</td><td>&quot;female&quot;</td><td>2007</td><td>false</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>2007</td><td>false</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td><td>36.7</td><td>19.3</td><td>193</td><td>3450</td><td>&quot;female&quot;</td><td>2007</td><td>false</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td><td>39.3</td><td>20.6</td><td>190</td><td>3650</td><td>&quot;male&quot;</td><td>2007</td><td>false</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td><td>38.9</td><td>17.8</td><td>181</td><td>3625</td><td>&quot;female&quot;</td><td>2007</td><td>false</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td><td>39.2</td><td>19.6</td><td>195</td><td>4675</td><td>&quot;male&quot;</td><td>2007</td><td>false</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td><td>34.1</td><td>18.1</td><td>193</td><td>3475</td><td>null</td><td>2007</td><td>false</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td><td>42.0</td><td>20.2</td><td>190</td><td>4250</td><td>null</td><td>2007</td><td>false</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td><td>37.8</td><td>17.1</td><td>186</td><td>3300</td><td>null</td><td>2007</td><td>false</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td><td>37.8</td><td>17.3</td><td>180</td><td>3700</td><td>null</td><td>2007</td><td>false</td></tr><tr><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td></tr><tr><td>&quot;Chinstrap&quot;</td><td>&quot;Dream&quot;</td><td>45.2</td><td>16.6</td><td>191</td><td>3250</td><td>&quot;female&quot;</td><td>2009</td><td>true</td></tr><tr><td>&quot;Chinstrap&quot;</td><td>&quot;Dream&quot;</td><td>49.3</td><td>19.9</td><td>203</td><td>4050</td><td>&quot;male&quot;</td><td>2009</td><td>true</td></tr><tr><td>&quot;Chinstrap&quot;</td><td>&quot;Dream&quot;</td><td>50.2</td><td>18.8</td><td>202</td><td>3800</td><td>&quot;male&quot;</td><td>2009</td><td>true</td></tr><tr><td>&quot;Chinstrap&quot;</td><td>&quot;Dream&quot;</td><td>45.6</td><td>19.4</td><td>194</td><td>3525</td><td>&quot;female&quot;</td><td>2009</td><td>true</td></tr><tr><td>&quot;Chinstrap&quot;</td><td>&quot;Dream&quot;</td><td>51.9</td><td>19.5</td><td>206</td><td>3950</td><td>&quot;male&quot;</td><td>2009</td><td>true</td></tr><tr><td>&quot;Chinstrap&quot;</td><td>&quot;Dream&quot;</td><td>46.8</td><td>16.5</td><td>189</td><td>3650</td><td>&quot;female&quot;</td><td>2009</td><td>true</td></tr><tr><td>&quot;Chinstrap&quot;</td><td>&quot;Dream&quot;</td><td>45.7</td><td>17.0</td><td>195</td><td>3650</td><td>&quot;female&quot;</td><td>2009</td><td>true</td></tr><tr><td>&quot;Chinstrap&quot;</td><td>&quot;Dream&quot;</td><td>55.8</td><td>19.8</td><td>207</td><td>4000</td><td>&quot;male&quot;</td><td>2009</td><td>true</td></tr><tr><td>&quot;Chinstrap&quot;</td><td>&quot;Dream&quot;</td><td>43.5</td><td>18.1</td><td>202</td><td>3400</td><td>&quot;female&quot;</td><td>2009</td><td>true</td></tr><tr><td>&quot;Chinstrap&quot;</td><td>&quot;Dream&quot;</td><td>49.6</td><td>18.2</td><td>193</td><td>3775</td><td>&quot;male&quot;</td><td>2009</td><td>true</td></tr><tr><td>&quot;Chinstrap&quot;</td><td>&quot;Dream&quot;</td><td>50.8</td><td>19.0</td><td>210</td><td>4100</td><td>&quot;male&quot;</td><td>2009</td><td>true</td></tr><tr><td>&quot;Chinstrap&quot;</td><td>&quot;Dream&quot;</td><td>50.2</td><td>18.7</td><td>198</td><td>3775</td><td>&quot;female&quot;</td><td>2009</td><td>true</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\nWe can create multiple columns at a time\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\npenguins.with_columns(\n    is_chinstrap=pl.col(\"species\") == \"Chinstrap\",\n    chonk=pl.col(\"body_mass_g\") >= 4000,\n    bill_stuff=pl.col(\"bill_length_mm\") + pl.col(\"bill_depth_mm\"),\n    sex_initial=pl.col(\"sex\").str.slice(0, 1).str.to_uppercase(),\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```{=html}\n<div><style>\n.dataframe > thead > tr > th,\n.dataframe > tbody > tr > td {\n  text-align: right;\n}\n</style>\n<small>shape: (344, 12)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>species</th><th>island</th><th>bill_length_mm</th><th>bill_depth_mm</th><th>flipper_length_mm</th><th>body_mass_g</th><th>sex</th><th>year</th><th>is_chinstrap</th><th>chonk</th><th>bill_stuff</th><th>sex_initial</th></tr><tr><td>str</td><td>str</td><td>f64</td><td>f64</td><td>i64</td><td>i64</td><td>str</td><td>i64</td><td>bool</td><td>bool</td><td>f64</td><td>str</td></tr></thead><tbody><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td><td>39.1</td><td>18.7</td><td>181</td><td>3750</td><td>&quot;male&quot;</td><td>2007</td><td>false</td><td>false</td><td>57.8</td><td>&quot;M&quot;</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td><td>39.5</td><td>17.4</td><td>186</td><td>3800</td><td>&quot;female&quot;</td><td>2007</td><td>false</td><td>false</td><td>56.9</td><td>&quot;F&quot;</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td><td>40.3</td><td>18.0</td><td>195</td><td>3250</td><td>&quot;female&quot;</td><td>2007</td><td>false</td><td>false</td><td>58.3</td><td>&quot;F&quot;</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>2007</td><td>false</td><td>null</td><td>null</td><td>null</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td><td>36.7</td><td>19.3</td><td>193</td><td>3450</td><td>&quot;female&quot;</td><td>2007</td><td>false</td><td>false</td><td>56.0</td><td>&quot;F&quot;</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td><td>39.3</td><td>20.6</td><td>190</td><td>3650</td><td>&quot;male&quot;</td><td>2007</td><td>false</td><td>false</td><td>59.9</td><td>&quot;M&quot;</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td><td>38.9</td><td>17.8</td><td>181</td><td>3625</td><td>&quot;female&quot;</td><td>2007</td><td>false</td><td>false</td><td>56.7</td><td>&quot;F&quot;</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td><td>39.2</td><td>19.6</td><td>195</td><td>4675</td><td>&quot;male&quot;</td><td>2007</td><td>false</td><td>true</td><td>58.8</td><td>&quot;M&quot;</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td><td>34.1</td><td>18.1</td><td>193</td><td>3475</td><td>null</td><td>2007</td><td>false</td><td>false</td><td>52.2</td><td>null</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td><td>42.0</td><td>20.2</td><td>190</td><td>4250</td><td>null</td><td>2007</td><td>false</td><td>true</td><td>62.2</td><td>null</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td><td>37.8</td><td>17.1</td><td>186</td><td>3300</td><td>null</td><td>2007</td><td>false</td><td>false</td><td>54.9</td><td>null</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td><td>37.8</td><td>17.3</td><td>180</td><td>3700</td><td>null</td><td>2007</td><td>false</td><td>false</td><td>55.1</td><td>null</td></tr><tr><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td></tr><tr><td>&quot;Chinstrap&quot;</td><td>&quot;Dream&quot;</td><td>45.2</td><td>16.6</td><td>191</td><td>3250</td><td>&quot;female&quot;</td><td>2009</td><td>true</td><td>false</td><td>61.8</td><td>&quot;F&quot;</td></tr><tr><td>&quot;Chinstrap&quot;</td><td>&quot;Dream&quot;</td><td>49.3</td><td>19.9</td><td>203</td><td>4050</td><td>&quot;male&quot;</td><td>2009</td><td>true</td><td>true</td><td>69.2</td><td>&quot;M&quot;</td></tr><tr><td>&quot;Chinstrap&quot;</td><td>&quot;Dream&quot;</td><td>50.2</td><td>18.8</td><td>202</td><td>3800</td><td>&quot;male&quot;</td><td>2009</td><td>true</td><td>false</td><td>69.0</td><td>&quot;M&quot;</td></tr><tr><td>&quot;Chinstrap&quot;</td><td>&quot;Dream&quot;</td><td>45.6</td><td>19.4</td><td>194</td><td>3525</td><td>&quot;female&quot;</td><td>2009</td><td>true</td><td>false</td><td>65.0</td><td>&quot;F&quot;</td></tr><tr><td>&quot;Chinstrap&quot;</td><td>&quot;Dream&quot;</td><td>51.9</td><td>19.5</td><td>206</td><td>3950</td><td>&quot;male&quot;</td><td>2009</td><td>true</td><td>false</td><td>71.4</td><td>&quot;M&quot;</td></tr><tr><td>&quot;Chinstrap&quot;</td><td>&quot;Dream&quot;</td><td>46.8</td><td>16.5</td><td>189</td><td>3650</td><td>&quot;female&quot;</td><td>2009</td><td>true</td><td>false</td><td>63.3</td><td>&quot;F&quot;</td></tr><tr><td>&quot;Chinstrap&quot;</td><td>&quot;Dream&quot;</td><td>45.7</td><td>17.0</td><td>195</td><td>3650</td><td>&quot;female&quot;</td><td>2009</td><td>true</td><td>false</td><td>62.7</td><td>&quot;F&quot;</td></tr><tr><td>&quot;Chinstrap&quot;</td><td>&quot;Dream&quot;</td><td>55.8</td><td>19.8</td><td>207</td><td>4000</td><td>&quot;male&quot;</td><td>2009</td><td>true</td><td>true</td><td>75.6</td><td>&quot;M&quot;</td></tr><tr><td>&quot;Chinstrap&quot;</td><td>&quot;Dream&quot;</td><td>43.5</td><td>18.1</td><td>202</td><td>3400</td><td>&quot;female&quot;</td><td>2009</td><td>true</td><td>false</td><td>61.6</td><td>&quot;F&quot;</td></tr><tr><td>&quot;Chinstrap&quot;</td><td>&quot;Dream&quot;</td><td>49.6</td><td>18.2</td><td>193</td><td>3775</td><td>&quot;male&quot;</td><td>2009</td><td>true</td><td>false</td><td>67.8</td><td>&quot;M&quot;</td></tr><tr><td>&quot;Chinstrap&quot;</td><td>&quot;Dream&quot;</td><td>50.8</td><td>19.0</td><td>210</td><td>4100</td><td>&quot;male&quot;</td><td>2009</td><td>true</td><td>true</td><td>69.8</td><td>&quot;M&quot;</td></tr><tr><td>&quot;Chinstrap&quot;</td><td>&quot;Dream&quot;</td><td>50.2</td><td>18.7</td><td>198</td><td>3775</td><td>&quot;female&quot;</td><td>2009</td><td>true</td><td>false</td><td>68.9</td><td>&quot;F&quot;</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\nI'll likely add more examples here as I encounter common use cases.\n\n# Summarizing DataFrames\n\nMost summarizing workflows will involve the `groupby()` method, followed by some other operation.\n\nProbably the most common thing we'll want to do is count by group\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\npenguins.groupby(\"island\").count()\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```{=html}\n<div><style>\n.dataframe > thead > tr > th,\n.dataframe > tbody > tr > td {\n  text-align: right;\n}\n</style>\n<small>shape: (3, 2)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>island</th><th>count</th></tr><tr><td>str</td><td>u32</td></tr></thead><tbody><tr><td>&quot;Dream&quot;</td><td>124</td></tr><tr><td>&quot;Biscoe&quot;</td><td>168</td></tr><tr><td>&quot;Torgersen&quot;</td><td>52</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\nWe can also group by multiple columns\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\npenguins.groupby([\"island\", \"species\"]).count()\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```{=html}\n<div><style>\n.dataframe > thead > tr > th,\n.dataframe > tbody > tr > td {\n  text-align: right;\n}\n</style>\n<small>shape: (5, 3)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>island</th><th>species</th><th>count</th></tr><tr><td>str</td><td>str</td><td>u32</td></tr></thead><tbody><tr><td>&quot;Torgersen&quot;</td><td>&quot;Adelie&quot;</td><td>52</td></tr><tr><td>&quot;Biscoe&quot;</td><td>&quot;Gentoo&quot;</td><td>124</td></tr><tr><td>&quot;Dream&quot;</td><td>&quot;Chinstrap&quot;</td><td>68</td></tr><tr><td>&quot;Dream&quot;</td><td>&quot;Adelie&quot;</td><td>56</td></tr><tr><td>&quot;Biscoe&quot;</td><td>&quot;Adelie&quot;</td><td>44</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\nAnother common thing might be to take the average of a numeric column by group. We can do this via the `agg()` method and passing various aggregation/summarization functions to this method.\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\npenguins.groupby(\"species\").agg(pl.mean(\"bill_length_mm\").alias(\"bill_length_mean\"))\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n```{=html}\n<div><style>\n.dataframe > thead > tr > th,\n.dataframe > tbody > tr > td {\n  text-align: right;\n}\n</style>\n<small>shape: (3, 2)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>species</th><th>bill_length_mean</th></tr><tr><td>str</td><td>f64</td></tr></thead><tbody><tr><td>&quot;Chinstrap&quot;</td><td>48.833824</td></tr><tr><td>&quot;Adelie&quot;</td><td>38.791391</td></tr><tr><td>&quot;Gentoo&quot;</td><td>47.504878</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\nWe might also want to get the average of all of our numeric types by group. This is another situation where the `polars.selectors` module is helpful.\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\npenguins.groupby(\"species\").agg(cs.by_dtype(pl.NUMERIC_DTYPES).mean().suffix(\"_mean\"))\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```{=html}\n<div><style>\n.dataframe > thead > tr > th,\n.dataframe > tbody > tr > td {\n  text-align: right;\n}\n</style>\n<small>shape: (3, 6)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>species</th><th>bill_length_mm_mean</th><th>bill_depth_mm_mean</th><th>flipper_length_mm_mean</th><th>body_mass_g_mean</th><th>year_mean</th></tr><tr><td>str</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td></tr></thead><tbody><tr><td>&quot;Adelie&quot;</td><td>38.791391</td><td>18.346358</td><td>189.953642</td><td>3700.662252</td><td>2008.013158</td></tr><tr><td>&quot;Chinstrap&quot;</td><td>48.833824</td><td>18.420588</td><td>195.823529</td><td>3733.088235</td><td>2007.970588</td></tr><tr><td>&quot;Gentoo&quot;</td><td>47.504878</td><td>14.982114</td><td>217.186992</td><td>5076.01626</td><td>2008.080645</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\nOr we might want to apply multiple aggregation functions to a column. This works basically like `with_columns()` in that you can pass multiple expressions\n\n::: {.cell execution_count=20}\n``` {.python .cell-code}\npenguins.groupby(\"species\").agg(\n    pl.mean(\"bill_length_mm\").alias(\"bill_length_mean\"),\n    pl.col(\"bill_length_mm\").count().alias(\"n\"),\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=20}\n```{=html}\n<div><style>\n.dataframe > thead > tr > th,\n.dataframe > tbody > tr > td {\n  text-align: right;\n}\n</style>\n<small>shape: (3, 3)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>species</th><th>bill_length_mean</th><th>n</th></tr><tr><td>str</td><td>f64</td><td>u32</td></tr></thead><tbody><tr><td>&quot;Chinstrap&quot;</td><td>48.833824</td><td>68</td></tr><tr><td>&quot;Gentoo&quot;</td><td>47.504878</td><td>124</td></tr><tr><td>&quot;Adelie&quot;</td><td>38.791391</td><td>152</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n# Reshaping Long and Wide\n\nLet's take our summary from before where we calculated the average of all of the numeric columns by species\n\n::: {.cell execution_count=21}\n``` {.python .cell-code}\nspecies_means = penguins.groupby(\"species\").agg(cs.by_dtype(pl.NUMERIC_DTYPES).mean())\n```\n:::\n\n\nNow suppose we want to pivot this longer so that it's in \"tidy\" format. To do this, we want the `melt()` method.\n\n::: {.cell execution_count=22}\n``` {.python .cell-code}\nspecies_long = species_means.melt(id_vars=\"species\")\n\nspecies_long.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=22}\n```{=html}\n<div><style>\n.dataframe > thead > tr > th,\n.dataframe > tbody > tr > td {\n  text-align: right;\n}\n</style>\n<small>shape: (5, 3)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>species</th><th>variable</th><th>value</th></tr><tr><td>str</td><td>str</td><td>f64</td></tr></thead><tbody><tr><td>&quot;Chinstrap&quot;</td><td>&quot;bill_length_mm…</td><td>48.833824</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;bill_length_mm…</td><td>38.791391</td></tr><tr><td>&quot;Gentoo&quot;</td><td>&quot;bill_length_mm…</td><td>47.504878</td></tr><tr><td>&quot;Chinstrap&quot;</td><td>&quot;bill_depth_mm&quot;</td><td>18.420588</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;bill_depth_mm&quot;</td><td>18.346358</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\nNote that in the above, there's also a `value_vars` parameter. By leaving it empty, it defaults to every column not in `id_vars`, but this might not always be the right choice.\n\nAnd if we want to reshape back to wide, we use `pivot()`. Pivot can optionally perform aggregations while reshaping, so we need to tell it that we don't want it to aggregate anything (by passing `aggregate_function=None`)\n\n::: {.cell execution_count=23}\n``` {.python .cell-code}\n species_long.pivot(values=\"value\", index=\"species\", columns=\"variable\", aggregate_function=None)\n```\n\n::: {.cell-output .cell-output-display execution_count=23}\n```{=html}\n<div><style>\n.dataframe > thead > tr > th,\n.dataframe > tbody > tr > td {\n  text-align: right;\n}\n</style>\n<small>shape: (3, 6)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>species</th><th>bill_length_mm</th><th>bill_depth_mm</th><th>flipper_length_mm</th><th>body_mass_g</th><th>year</th></tr><tr><td>str</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td></tr></thead><tbody><tr><td>&quot;Chinstrap&quot;</td><td>48.833824</td><td>18.420588</td><td>195.823529</td><td>3733.088235</td><td>2007.970588</td></tr><tr><td>&quot;Adelie&quot;</td><td>38.791391</td><td>18.346358</td><td>189.953642</td><td>3700.662252</td><td>2008.013158</td></tr><tr><td>&quot;Gentoo&quot;</td><td>47.504878</td><td>14.982114</td><td>217.186992</td><td>5076.01626</td><td>2008.080645</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n",
    "supporting": [
      "polars_cheat_sheet_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}