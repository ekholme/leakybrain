{
  "hash": "76970bf521fdd55530d00442080649fa",
  "result": {
    "markdown": "---\ntitle: Scikit-Learn Pipeline\ndescription: |\n  A minimal machine learning pipeline using Python and sklearn\ndate: '2023-07-11'\nformat:\n  html:\n    code-fold: false\n---\n\nBelow is a minimal (yet complete) example of a machine learning pipeline using python and [scikit-learn](https://scikit-learn.org/stable/) and the [Palmer Penguins dataset](https://allisonhorst.github.io/palmerpenguins/).\n\nNote that the goal here isn't necessarily to fit the best model; rather it's just to demonstrate an sklearn pipeline. Also note that I wouldn't call myself an expert python programmer, so there may be better/more efficient ways to do this.\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport polars as pl\nimport numpy as np\nimport math\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler, OneHotEncoder\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.metrics import mean_squared_error\n\npenguins = pl.read_csv(\n    \"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-07-28/penguins.csv\",\n    null_values=\"NA\",\n)\n\n# filtering to only rows with available body mass data\npenguins_complete = penguins.filter(pl.col(\"body_mass_g\").is_not_null())\n\n# coercing null to nan\npenguins_complete = penguins_complete.with_columns(pl.all().fill_null(np.nan))\n\n# separate into X and y\ny = penguins_complete[\"body_mass_g\"]\nX = penguins_complete.select(pl.exclude(\"body_mass_g\"))\n\n# coerce X to pandas since polars dfs don't seem to be supported for all of the sklearn steps yet\nX = X.to_pandas()\n\n# train test split\nX_trn, X_tst, y_trn, y_tst = train_test_split(X, y, random_state=408)\n\n# create pipeline for categorical features\ncat_feats = [\"species\", \"island\", \"sex\"]\ncat_transform = Pipeline(\n    [\n        (\"cat_imputer\", SimpleImputer(strategy=\"most_frequent\")),\n        (\"oh_encoder\", OneHotEncoder(drop=\"first\")),\n    ]\n)\n\n# create pipeline for numerical features\ncont_feats = [\"bill_length_mm\", \"bill_depth_mm\", \"flipper_length_mm\", \"year\"]\ncont_transform = Pipeline(\n    [\n        (\"cont_imputer\", SimpleImputer(strategy=\"mean\")),\n        (\"standardizer\", StandardScaler()),\n    ]\n)\n\n# create a preprocessing pipeline\npreprocessor = ColumnTransformer(\n    [(\"cats\", cat_transform, cat_feats), (\"conts\", cont_transform, cont_feats)]\n)\n\n# make full pipeline\npipe = Pipeline([(\"preprocess\", preprocessor), (\"lin_reg\", LinearRegression())])\n\n# fit pipeline\npipe.fit(X_trn, y_trn)\n\n# predict training y's\ny_hat = pipe.predict(X_trn)\n\n# evaluate model\ny_hat_tst = pipe.predict(X_tst)\n\nmath.sqrt(mean_squared_error(y_tst, y_hat_tst))\n\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n295.1333053249438\n```\n:::\n:::\n\n\n",
    "supporting": [
      "sklearn_pipeline_files"
    ],
    "filters": [],
    "includes": {}
  }
}