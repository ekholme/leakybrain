{
  "hash": "724708fffdb1865eed29ee0e0128d0a5",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"S3 Methods\"\ndescription: |\n  A minimal example of creating and calling S3 methods\ndate: 2023-08-03\nformat:\n  html:\n    code-fold: false\nexecute: \n  warning: false\n---\n\n\nBelow is a sort of minimal example of S3 methods, including how to define them for various classes.\n\n# Define a Generic\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncombine <- function(x) {\n    UseMethod(\"combine\")\n} \n```\n:::\n\n\n# Define and Instantiate Some Classes\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# constructor for a new instance of 'my_class'\nnew_my_class <- function(x, y) {\n    stopifnot(is.character(x) & is.character(y))\n\n    structure(\n        list(x = x, y = y),\n        class = \"my_class\"\n    )\n} \n\n# constructor for a new instance of 'your_class'\nnew_your_class <- function(x, y) {\n    stopifnot(is.numeric(x) & is.numeric(y))\n\n    structure(\n        list(x = x, y = y),\n        class = \"your_class\"\n    )\n}\n\na <- new_my_class(\"aaa\", \"bbb\")\nb <- new_your_class(1, 2)\n```\n:::\n\n\n# Define Combine Methods for Each Class\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncombine.my_class <- function(x) {\n    paste0(\n        vctrs::field(x, \"x\"),\n        vctrs::field(x, \"y\")\n    )\n} \n\ncombine.your_class <- function(x) {\n    a <- vctrs::field(x, \"x\")\n    b <- vctrs::field(x, \"y\")\n\n    a + b\n}\n```\n:::\n\n\n# Call Methods\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncombine(a) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"aaabbb\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncombine(b) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3\n```\n\n\n:::\n:::\n\n\nhuzzah!",
    "supporting": [
      "s3_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}