{
  "hash": "1dd20676d9ea80b625a7f5499f342454",
  "result": {
    "markdown": "---\ntitle: Basics - Classes\ndescription: |\n  Python classes basics\ndate: '2023-08-11'\nformat:\n  html:\n    code-fold: false\n---\n\nThe stuff below is like Python classes 101. It's mostly either directly copied from or else loosely inspired by the [Python manual](https://docs.python.org/3/tutorial/classes.html)\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\n# define a new class\nclass MyClass:\n    x = 123\n\n    def greet(self):\n        return \"Hello from MyClass\"\n\n\nx = MyClass()\n\n# see class attributes\nx.greet()\nx.x\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n123\n```\n:::\n:::\n\n\n## Init Method\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\n# we can define an __init()__ method to help us create object instances with specific initial states\nclass MyClass:\n    def __init__(self, x):\n        self.x = x\n\n    def greet(self):\n        return \"Hello from MyClass\"\n\n\ny = MyClass(x=1)\ny.x\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\n1\n```\n:::\n:::\n\n\n## Class Variables and Instance Variables\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\n# class variables will be shared by all instances, whereas instance variables will be unique to each instance\nclass Dog:\n    kind = \"canine\"  # class variable\n\n    def __init__(self, name):\n        self.name = name\n\n\nd = Dog(\"Nala\")\ne = Dog(\"Adi\")\n\nd.name\nd.kind\ne.name\n\n\n# below might be a way to create a Dog class where each dog has its own set of tricks\nclass Dog:\n    kind = \"canine\"\n\n    def __init__(self, name):\n        self.name = name\n        self.tricks = []\n\n    def add_trick(self, trick):\n        self.tricks.append(trick)\n\n\nd = Dog(\"Nala\")\nd.add_trick(\"roll over\")\nd.add_trick(\"sit\")\n\nd.tricks\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\n['roll over', 'sit']\n```\n:::\n:::\n\n\n## Class Inheritance\n\nClass inheritance lets classes inherit variables and methods from other classes\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\n# classes also support inheritance\nclass Animal:\n    def __init__(self, name):\n        self.name = name\n\n\nclass Cat(Animal):\n    kind = \"cat\"\n\n\na = Cat(\"Fluffy\")\n\na.name\na.kind\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\n'cat'\n```\n:::\n:::\n\n\n",
    "supporting": [
      "basics_classes_files"
    ],
    "filters": [],
    "includes": {}
  }
}